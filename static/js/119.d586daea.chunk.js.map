{"version":3,"file":"static/js/119.d586daea.chunk.js","mappings":"8MAmBIA,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfC,EAAK,GACLC,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWL,IAC3CA,KAAQ,CACb,IAAIM,EAAqB,GAAdJ,EAAMF,GAEfC,GADEK,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOL,CACR,EClCD,EAAuB,0BAAvB,EAA8D,gCAA9D,EAAuG,4BAAvG,EAA2I,2BAA3I,EAAkL,+B,2CCK3K,SAASQ,IACd,IAAMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KAGMC,EAAoB,SAAAC,GACxB,MAAwBA,EAAIC,OAApBN,EAAR,EAAQA,KAAMO,EAAd,EAAcA,MACd,OAAQP,GACN,IAAK,OACHC,EAAQM,GACR,MACF,IAAK,QACHJ,EAASI,GACT,MACF,QACE,OAGL,EAEKC,EAAe,SAAAH,GACnBA,EAAII,iBACJZ,GAASa,EAAAA,EAAAA,IAAW,CAAEV,KAAAA,EAAME,MAAAA,KAC5BS,GACD,EAEKA,EAAY,WAChBV,EAAQ,IACRE,EAAS,GAEV,EACD,OACE,+BACE,kBAAMS,UAAWC,EAAUC,SAAUN,EAArC,WACE,mBAAOI,UAAWC,EAAWE,QAAS7B,IAAtC,WACE,cAAG0B,UAAWC,EAAd,mBACA,kBACED,UAAWC,EACXG,KAAK,OACLhB,KAAK,OACLO,MAAOP,EACPiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,SAAUhB,QAGd,mBAAOQ,UAAWC,EAAWE,QAAS7B,IAAtC,WACE,cAAG0B,UAAWC,EAAd,oBACA,kBACED,UAAWC,EACXG,KAAK,MACLhB,KAAK,QACLO,MAAOL,EACPe,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,SAAUhB,QAGd,mBAAQQ,UAAWC,EAAYG,KAAK,SAASF,SAAUN,EAAvD,6BAMP,CACDZ,EAAYyB,UAAY,CACtBrB,KAAMsB,IAAAA,OACNC,OAAQD,IAAAA,OACRlC,GAAIkC,IAAAA,OACJF,SAAUE,IAAAA,KACVR,SAAUQ,IAAAA,MC/EZ,MAA8B,iCCA9B,EAA6B,mCAA7B,EAAuE,6BCE1DE,EAAO,SAAC,GAAmC,IAAjCxB,EAAgC,EAAhCA,KAAMuB,EAA0B,EAA1BA,OAAQnC,EAAkB,EAAlBA,GAAIqC,EAAc,EAAdA,QACvC,OACE,gBAAIrC,GAAIA,EAAIwB,UAAWC,EAAvB,WACE,yBACGb,EADH,KACWuB,MAEX,mBAAQX,UAAWC,EAAgBG,KAAK,SAASS,QAASA,EAA1D,sBAKL,EACDD,EAAKH,UAAY,CACfrB,KAAMsB,IAAAA,OACNC,OAAQD,IAAAA,OACRlC,GAAIkC,IAAAA,OACJG,QAASH,IAAAA,MCnBJ,IAIMI,EAAkB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,SAAnB,EAEvBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,KAAnB,EAEnBC,EAAwB,SAAAL,GACnC,IAAMC,EATsB,SAAAD,GAAK,OAAIA,EAAMC,SAASK,KAAnB,CAShBC,CAAeP,GAC1BQ,EARoB,SAAAR,GAAK,OAAIA,EAAMQ,MAAV,CAQhBC,CAAaT,GAE5B,OAAOC,EAASO,QAAO,SAAAE,GAAO,OAC5BA,EAAQrC,KAAKsC,cAAcC,SAASJ,EADR,GAG/B,ECRYK,EAAc,WACzB,IAAM3C,GAAWC,EAAAA,EAAAA,MACT2C,GAAkBC,EAAAA,EAAAA,IAAYV,GACtC,OACE,eAAIpB,UAAWC,EAAf,SACG4B,EAAgBE,KAAI,gBAAG3C,EAAH,EAAGA,KAAME,EAAT,EAASA,MAAOd,EAAhB,EAAgBA,GAAhB,OACnB,SAACoC,EAAD,CACEpC,GAAIA,EACJmC,OAAQrB,EACRF,KAAMA,EACNyB,QAAS,kBAAM5B,GAAS+C,EAAAA,EAAAA,IAAcxD,GAA7B,GALQ,KAU1B,EAEDoD,EAAYnB,UAAY,CACtBrB,KAAMsB,IAAAA,OACNC,OAAQD,IAAAA,OACRlC,GAAIkC,IAAAA,OACJuB,gBAAiBvB,IAAAA,MC3BnB,MAAyB,uBAAzB,EAA8D,4BAA9D,EAAuG,2B,SCK1FwB,EAAS,SAAC,GAAe,IAAbvC,EAAY,EAAZA,MACjBV,GAAWC,EAAAA,EAAAA,MAKjB,OACE,iBAAKc,UAAWC,EAAhB,WACE,cAAGD,UAAWC,EAAd,oCACA,kBACED,UAAWC,EACXG,KAAK,OACLT,MAAOA,EACPU,QAAQ,yHACRE,UAAQ,EACRC,SAbe,SAAAf,GACnBR,GAASkD,EAAAA,EAAAA,GAAe1C,EAAI2C,cAAczC,MAAM+B,eACjD,MAeF,EACDQ,EAAOzB,UAAY,CACjBd,MAAOe,IAAAA,OACPF,SAAUE,IAAAA,MClBL,IAAM2B,EAAe,WAC5B,IAAMpB,GAAYa,EAAAA,EAAAA,IAAYhB,GACxBK,GAAQW,EAAAA,EAAAA,IAAYZ,GACnBjC,GAAWC,EAAAA,EAAAA,MAMd,OAJHoD,EAAAA,EAAAA,YAAU,WACRrD,GAASsD,EAAAA,EAAAA,MACV,GAAE,CAACtD,KAGG,iBACIuD,MAAO,CACHC,MAAO,MAFf,WAKI,eAAID,MAAO,CAAEE,SAAU,IAAvB,wBACA,SAAC1D,EAAD,KACA,eAAIwD,MAAO,CAAEE,SAAU,IAAvB,uBACA,SAACR,EAAD,IACCjB,IAAcE,IAAS,mDACxB,SAACS,EAAD,MAGX,EACDS,EAAa5B,UAAY,CACvBc,OAAQb,IAAAA,OACRM,SAAUN,IAAAA,O,mCC3BZ,IAAIiC,EAAuBC,EAAQ,IAEnC,SAASC,IAAkB,CAC3B,SAASC,IAA2B,CACpCA,EAAuBC,kBAAoBF,EAE3CG,EAAOC,QAAU,WACf,SAASC,EAAKC,EAAOC,EAAUC,EAAeC,EAAUC,EAAcC,GACpE,GAAIA,IAAWb,EAAf,CAIA,IAAIc,EAAM,IAAIC,MACZ,mLAKF,MADAD,EAAIrE,KAAO,sBACLqE,CAPL,CAQF,CAED,SAASE,IACP,OAAOT,CACR,CAHDA,EAAKU,WAAaV,EAMlB,IAAIW,EAAiB,CACnBC,MAAOZ,EACPa,OAAQb,EACRc,KAAMd,EACNe,KAAMf,EACNvC,OAAQuC,EACRgB,OAAQhB,EACRiB,OAAQjB,EACRkB,OAAQlB,EAERmB,IAAKnB,EACLoB,QAASX,EACTY,QAASrB,EACTsB,YAAatB,EACbuB,WAAYd,EACZe,KAAMxB,EACNyB,SAAUhB,EACViB,MAAOjB,EACPkB,UAAWlB,EACXmB,MAAOnB,EACPoB,MAAOpB,EAEPqB,eAAgBlC,EAChBC,kBAAmBF,GAKrB,OAFAgB,EAAenD,UAAYmD,EAEpBA,CACR,C,oBC/CCb,EAAOC,QAAUL,EAAQ,IAARA,E,8BCNnBI,EAAOC,QAFoB,8C","sources":["../node_modules/nanoid/index.browser.js","webpack://react-homework-template/./src/components/ContactForm/contactForm.module.css?2173","components/ContactForm/contactForm.jsx","webpack://react-homework-template/./src/components/ContactList/contactList.module.css?ddc0","webpack://react-homework-template/./src/components/ContactListOne/contactListOne.module.css?4c1c","components/ContactListOne/contactListOne.jsx","redux/contacts/selectors.js","components/ContactList/contactList.jsx","webpack://react-homework-template/./src/components/Filter/filter.module.css?e01c","components/Filter/filter.jsx","pages/ContactsPage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"contactForm_form__3ay0L\",\"inputField\":\"contactForm_inputField__Z+sPo\",\"button\":\"contactForm_button__JixDz\",\"label\":\"contactForm_label__WakW9\",\"textLabel\":\"contactForm_textLabel__TwYWj\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport css from './contactForm.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nexport function ContactForm() {\n  const dispatch = useDispatch();\n\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  // const [id, setId] = useState('');\n\n  const handleInputChange = evt => {\n    const { name, value } = evt.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'phone':\n        setPhone(value);\n        break;\n      default:\n        return;\n    }\n    // setId(nanoid());\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    dispatch(addContact({ name, phone }));\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n    // setId('');\n  };\n  return (\n    <>\n      <form className={css.form} onSubmit={handleSubmit}>\n        <label className={css.label} htmlFor={nanoid()}>\n          <p className={css.textLabel}>Name</p>\n          <input\n            className={css.inputField}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            onChange={handleInputChange}\n          />\n        </label>\n        <label className={css.label} htmlFor={nanoid()}>\n          <p className={css.textLabel}>Phone</p>\n          <input\n            className={css.inputField}\n            type=\"tel\"\n            name=\"phone\"\n            value={phone}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            onChange={handleInputChange}\n          />\n        </label>\n        <button className={css.button} type=\"submit\" onSubmit={handleSubmit}>\n          Add contact\n        </button>\n      </form>\n    </>\n  );\n}\nContactForm.prototype = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  id: PropTypes.number,\n  onChange: PropTypes.func,\n  onSubmit: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"contactList_contactList__rfM1N\"};","// extracted by mini-css-extract-plugin\nexport default {\"itemButton\":\"contactListOne_itemButton__huOXg\",\"item\":\"contactListOne_item__nVZre\"};","import css from './contactListOne.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Item = ({ name, number, id, onClick }) => {\n  return (\n    <li id={id} className={css.item}>\n      <p>\n        {name}: {number}\n      </p>\n      <button className={css.itemButton} type=\"button\" onClick={onClick}>\n        Delete\n      </button>\n    </li>\n  );\n};\nItem.prototype = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  id: PropTypes.number,\n  onClick: PropTypes.func,\n};\n","export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectVisibleContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter)\n  );\n};\n","import css from './contactList.module.css';\nimport { Item } from '../ContactListOne/contactListOne';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectVisibleContacts } from '../../redux/contacts/selectors';\nimport { deleteContact } from '../../redux/contacts/operations';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n    const visibleContacts = useSelector(selectVisibleContacts);\n  return (\n    <ul className={css.contactList}>\n      {visibleContacts.map(({ name, phone, id }) => (\n        <Item\n          id={id}\n          number={phone}\n          name={name}\n          onClick={() => dispatch(deleteContact(id))}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.prototype = {\n  name: PropTypes.string,\n  number: PropTypes.number,\n  id: PropTypes.number,\n  onDeleteContact: PropTypes.func,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"filter_filter__HJEMj\",\"filterTitle\":\"filter_filterTitle__DdQ99\",\"inputField\":\"filter_inputField__S3D6l\"};","import React from 'react';\nimport css from './filter.module.css';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { filterContacts } from '../../redux/contacts/filterSlice';\n\nexport const Filter = ({ value }) => {\n  const dispatch = useDispatch();\n  const handleChange = evt => {\n    dispatch(filterContacts(evt.currentTarget.value.toLowerCase()));\n  };\n\n  return (\n    <div className={css.filter}>\n      <p className={css.filterTitle}>Find contacts by name</p>\n      <input\n        className={css.inputField}\n        type=\"text\"\n        value={value}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        required\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\nFilter.prototype = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n","import { ContactForm } from '../components/ContactForm/contactForm';\nimport { ContactList } from '../components/ContactList/contactList';\nimport { Filter } from '../components//Filter/filter';\nimport { fetchContacts } from '../redux/contacts/operations';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport { selectError, selectIsLoading } from '../redux/contacts/selectors';\n\nexport const ContactsPage = () => {\nconst isLoading = useSelector(selectIsLoading);\nconst error = useSelector(selectError);\n const dispatch = useDispatch();\n \n useEffect(() => {\n   dispatch(fetchContacts());\n }, [dispatch]);\n    \n    return (\n        <div\n            style={{\n                width: 1100,\n            }}\n        >\n            <h1 style={{ fontSize: 60 }}>Phonebook</h1>\n            <ContactForm />\n            <h2 style={{ fontSize: 50 }}>Contacts</h2>\n            <Filter />\n            {isLoading && !error && <b>Request in progress...</b>}\n            <ContactList />\n        </div>\n    )\n};\nContactsPage.prototype = {\n  filter: PropTypes.string,\n  contacts: PropTypes.number,\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","dispatch","useDispatch","useState","name","setName","phone","setPhone","handleInputChange","evt","target","value","handleSubmit","preventDefault","addContact","resetForm","className","css","onSubmit","htmlFor","type","pattern","title","required","onChange","prototype","PropTypes","number","Item","onClick","selectIsLoading","state","contacts","isLoading","selectError","error","selectVisibleContacts","items","selectContacts","filter","selectFilter","contact","toLowerCase","includes","ContactList","visibleContacts","useSelector","map","deleteContact","onDeleteContact","Filter","filterContacts","currentTarget","ContactsPage","useEffect","fetchContacts","style","width","fontSize","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}